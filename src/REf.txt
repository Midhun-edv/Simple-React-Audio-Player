import React, { useState, useEffect } from 'react';

const AudioPlaylist = () => {
  const [playlist, setPlaylist] = useState([]);

  useEffect(() => {
    // Retrieve playlist from local storage on component mount
    const storedPlaylist = JSON.parse(localStorage.getItem('audioPlaylist'));
    if (storedPlaylist) {
      setPlaylist(storedPlaylist);
    }

    // Set up event listener for changes in local storage
    const handleStorageChange = (event) => {
      if (event.key === 'audioPlaylist') {
        const updatedPlaylist = JSON.parse(event.newValue);
        setPlaylist(updatedPlaylist || []);
      }
    };

    window.addEventListener('storage', handleStorageChange);

    // Clean up the event listener when the component unmounts
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

 const addAudios = (event) => {
  const input = event.target;
  const newAudios = Array.from(input.files);
  
  const updatedPlaylist = [
    ...playlist,
    ...newAudios.map((audio) => ({
      name: audio.name || `UnknownFile_${audio.lastModified}`,
      file: audio,
    }))
  ];

  setPlaylist(updatedPlaylist);

  // Store the updated playlist in local storage
  localStorage.setItem('audioPlaylist', JSON.stringify(updatedPlaylist));

  // Clear the input value to allow selecting the same file again
  input.value = null;
};

    setPlaylist(updatedPlaylist);

    // Store the updated playlist in local storage
    localStorage.setItem('audioPlaylist', JSON.stringify(updatedPlaylist));

    // Clear the input value to allow selecting the same file again
    input.value = null;
  };

  return (
    <div>
      <h1>Audio Playlist</h1>

      <input
        type="file"
        id="audioInput"
        accept="audio/*"
        multiple
        onChange={addAudios}
      />
      <button>Add Audios</button>

      <ul>
        {playlist.map((audio, index) => (
          <li key={index}>{audio.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default AudioPlaylist;
